{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","imgGif","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgsGifs","useFetchGifs","gifsImagenes","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAmCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAaA,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OAEnCN,EAAc,OAQhB,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBgB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCkBhBG,EAzBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAKNC,EAAM,0CAA0CC,UAAUH,GAAU,qDAL9D,SAMOI,MAAMF,GANb,cAMNG,EANM,gBASSA,EAAKC,OATd,uBASLC,EATK,EASLA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAS,IAAD,EAC1B,MAAM,CACEC,GAAID,EAAOC,GACXC,MAAOF,EAAOE,MACdV,IAAG,UAAEQ,EAAOG,cAAT,aAAE,EAAeC,iBAAiBZ,QAhBrC,kBAsBLM,GAtBK,4CAAH,sDCYEO,EAVK,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAExB,OADAc,QAAQC,IAAIL,EAAMV,GAEd,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCgBDS,EAnBC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAEd,ECAwB,SAACA,GACzB,MAAyBd,mBAAS,CAC9BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAaC,EAAb,KA2BA,OAtBAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAAC,GAGfX,QAAQC,IAAIU,GACZH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAIvB,CAACtB,IAWIuB,ED5B6BK,CAAa5B,GAArC6B,EAAZ,EAAOtB,KAAkBe,EAAzB,EAAyBA,QAEzB,OACI,oCACI,wBAAIJ,UAAU,qCAAqClB,GAElDsB,GAAS,uBAAGJ,UAAU,oCAAb,cACV,yBAAKA,UAAU,aAEPW,EAAapB,KAAI,SAACqB,GAAD,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAInB,IAAQmB,UEmB3DE,EA3BM,WAEjB,MAAoC9C,mBAAS,CAAC,gBAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAMA,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAGQgD,EAAWxB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CAAS+B,IAAK/B,EAAUA,SAAUA,U,MCnB1DkC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.81040fdd.chunk.js","sourcesContent":["//componente que representa un form que contiene un input donde se escribe una categoria y usa la funcion setCategories de el componente GifExpertApp. Se actualizara dicho componennte\r\nimport React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue,setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);//actualiza el inputValue y muestra su contenido en el sitio (en este casi input text) donde este se encuentre\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();//para que no se vaya a otra pagina\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats=>[inputValue,...cats]);//setCategories viene de GifExpertApp, que recordemos que cuando llamamos este Set, este re renderiza la parte del .map del arreglo de categories para imprimirlas con <li></li>\r\n            //cats es el arreglo categories de GifExpertApp\r\n            setInputValue('');\r\n        }\r\n       \r\n    }//onSubmit: al presionar enter sobre el unico input que esta en el form\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          {/**e.target.value contiene el valor del input text */}  \r\n          {/**onChange={(e) => {setInputValue(e.target.value)}}   */}\r\n          <input \r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n          />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired//se necesita que setCategories sea una propiedad de AddCategory obligatoria. SetCategories debe ser una funcion\r\n}\r\n\r\nexport default AddCategory;\r\n","const getGifs = async(category) => {//peticion javascript, devuelve una promesa\r\n    //encodeURI para eliminar espacios de una cadena\r\n    //end point\r\n    //api.giphy.com/v1/gifs/search?q=Crash Bandicoot&limit=10&api_key=ku98RqvWri2FIQcH1eKCIxvq888qNnwm\r\n    //const url = 'https://api.giphy.com/v1/gifs/search?q=Crash Bandicoot&limit=10&api_key=ku98RqvWri2FIQcH1eKCIxvq888qNnwm';\r\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(category)+'&limit=10&api_key=ku98RqvWri2FIQcH1eKCIxvq888qNnwm';\r\n    const resp = await fetch(url);\r\n    //const data = await resp.json();\r\n    //console.log(data);\r\n    const {data} = await resp.json();\r\n    //gifs es un arreglo de datos\r\n    //images? (si viene la url de la imagen, que se utilice)\r\n    const gifs = data.map(imgGif=>{\r\n        return{\r\n                id: imgGif.id,\r\n                title: imgGif.title,\r\n                url: imgGif.images?.downsized_medium.url\r\n            }\r\n        \r\n    })\r\n    //console.log(gifs);//hasta aqui ya tenemos los gifs gracias a la peticion que hemos hecho usando post man (solo 10)\r\n    //setImages(gifs);\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import React from 'react';\r\n//class es una palabra reservada de javascript\r\nconst GifGridItem = ({title,url}) => {\r\n    console.log(title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';//ESTE ES UN CUSTOM HOOK\r\nimport GifGridItem from './GifGridItem';\r\n//Recibe categoria y realiza una funcion http\r\nconst GifGrid = ({category}) => {\r\n    //usamos desestructuracion, sacamos la data que devuelve useFetchGifs(category) y la renombramos a gifImagenes\r\n    const {data:gifsImagenes,loading} = useFetchGifs(category);//useFetchGifs cambia el estado de este componente en el loading\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {/*loading?'Cargando...':'Data cargada'*/}\r\n            {loading&&<p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    gifsImagenes.map((img)=><GifGridItem key={img.id} {...img} />)                 \r\n                }\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifs from \"../helpers/getGifs\";\r\n//un custom hook tambien pueden tener estados, por eso usamos useState. Funciona como un functional component\r\n//EXTRAIMOS UNA PEQUEÃ‘A Logica QUE SE IMPLEMENTA ABAJO para realizar una carga automatica\r\n//Cuando tenemos la data despues de 3 segundos, se re-renderiza\r\n//Este custom hook se relaciona con el componente GifGrid\r\nexport const useFetchGifs = (category) => {\r\n    const [state,setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category).then(imgsGifs=>{\r\n\r\n            //setTimeout(()=>{\r\n                console.log(imgsGifs);//imprime un arreglo de 10 objetos\r\n                setState({\r\n                    data: imgsGifs,\r\n                    loading: false\r\n                })//hasta aqui ya tengo mi custoom hook que regresa\r\n            //},3000);//3 segundos para ejecutarse esto, que seria el setState\r\n        })\r\n    },[category]);//Solo se ejecuta una vez este use effect por cada categoria que el usuario ingrese\r\n\r\n    /*setTimeout(()=>{ VIDEO 78\r\n        setState({\r\n            data: [1,2,3,4,5,6,7],\r\n            loading: false\r\n        }\r\n\r\n        );\r\n    },3000);//primero retorna el estado*/\r\n\r\n    return state;//state = {data[],loading}\r\n}","//import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n//imrs\r\n//rafce\r\n//Primer componente\r\nconst GifExpertApp = () => {\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n    /*const handleAdd = () => {\r\n        //categories.push('Otro');//esto esta mal, solo se puede cambiar el valor de categories con setCategories\r\n        //setCategories([...categories,'SpiderMan']);//con setCategories cambiamos el estado\r\n        setCategories(cats => [...cats,'Spiderman']);\r\n    }*/\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            {/**<button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {/**Barremos con expresion que regrese algo*/}\r\n                {\r\n                    categories.map((category)=> \r\n                        <GifGrid key={category} category={category} />\r\n                        \r\n                    )//recorremos arreglo y category es el actual\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n//\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//GifExpertApp\n//"],"sourceRoot":""}